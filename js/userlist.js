document.addEventListener("DOMContentLoaded", function () {
  const apiUrl = "https://crudnodejs-production.up.railway.app/api/users";
  let rowsPerPage = 6; // S·ªë d√≤ng tr√™n m·ªói trang
  let currentPage = 1;
  let totalUsers = 0;
  let usersData = [];

  // Ki·ªÉm tra xem c√≥ ph·∫£i trang userlist kh√¥ng
  if (document.querySelector(".user-list__table-body")) {
    fetchUsers();
    setupNewUserButton();
  }

  const searchInput = document.querySelector(".user-list__search-input");
  searchInput.addEventListener("input", function () {
    const query = searchInput.value.trim();
    if (query.length > 0) {
      searchUsers(query);
    } else {
      fetchUsers(); // N·∫øu √¥ t√¨m ki·∫øm tr·ªëng, t·∫£i l·∫°i danh s√°ch ng∆∞·ªùi d√πng ban ƒë·∫ßu
    }
  });

  // Ki·ªÉm tra xem c√≥ ph·∫£i trang detailuser kh√¥ng
  if (document.querySelector(".detail-user__form")) {
    fetchUserDetails();
  }
  async function searchUsers(query) {
    const searchUrl = `${apiUrl}/search?q=${encodeURIComponent(query)}`;

    try {
      const response = await fetch(searchUrl, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          // Th√™m token n·∫øu c·∫ßn thi·∫øt
          Authorization: "Bearer YOUR_AUTH_TOKEN",
        },
      });

      if (!response.ok) {
        throw new Error("L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng");
      }

      const result = await response.json();
      if (result.users && result.users.length > 0) {
        usersData = result.users; // C·∫≠p nh·∫≠t m·∫£ng usersData v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
        renderPage(1); // Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n c·ªßa k·∫øt qu·∫£ t√¨m ki·∫øm
      } else {
        alert("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o.");
        usersData = []; // X√≥a d·ªØ li·ªáu trong usersData n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
        renderPage(1); // X√≥a danh s√°ch hi·ªán t·∫°i tr√™n giao di·ªán
      }
    } catch (error) {
      console.error("L·ªói:", error);
    }
  }

  // H√†m ƒë·ªÉ fetch danh s√°ch ng∆∞·ªùi d√πng cho trang userlist
  async function fetchUsers() {
    try {
      const response = await fetch(apiUrl, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
      }

      usersData = await response.json();
      totalUsers = usersData.length;

      renderPage(currentPage);
      renderPagination();
    } catch (error) {
      console.error("C√≥ l·ªói x·∫£y ra:", error);
    }
  }

  // H√†m ƒë·ªÉ render m·ªôt trang c·ª• th·ªÉ c·ªßa danh s√°ch user
  function renderPage(page) {
    const tableBody = document.querySelector(".user-list__table-body");
    const startIndex = (page - 1) * rowsPerPage;
    const endIndex = Math.min(startIndex + rowsPerPage, totalUsers);

    tableBody.innerHTML = "";

    for (let i = startIndex; i < endIndex; i++) {
      const user = usersData[i];
      const row = document.createElement("div");
      row.classList.add("user-list__table-row");

      row.innerHTML = `
            <p class="user-list__table-cell">${i + 1}</p>
            <p class="user-list__table-cell">${user.username}</p>
            <p class="user-list__table-cell">${user.email}</p>
            <div class="user-list__table-cell user-list__table-actions">
              <button class="user-list__action-button detail-button" data-user-id="${user._id
        }">‚Üó</button>
              <button class="user-list__action-button edit-button" data-user-id="${user._id
        }">‚úé</button>
              <button class="user-list__action-button delete-button" data-user-id="${user._id
        }">üóë</button>
            </div>
          `;

      tableBody.appendChild(row);
    }

    // G·∫Øn s·ª± ki·ªán click cho n√∫t "‚Üó"
    document.querySelectorAll(".detail-button").forEach((button) => {
      button.addEventListener("click", function () {
        const userId = this.getAttribute("data-user-id");
        viewDetailUser(userId);
      });
    });

    // G·∫Øn s·ª± ki·ªán click cho n√∫t "‚úé"
    document.querySelectorAll(".edit-button").forEach((button) => {
      button.addEventListener("click", function () {
        const userId = this.getAttribute("data-user-id");
        updateUser(userId);
      });
    });

    // G·∫Øn s·ª± ki·ªán click cho n√∫t "üóë"
    document.querySelectorAll(".delete-button").forEach((button) => {
      button.addEventListener("click", function () {
        const userId = this.getAttribute("data-user-id");
        deleteUser(userId);
      });
    });
  }

  // H√†m ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang updateuser.html
  function updateUser(userId) {
    localStorage.setItem("userId", userId);
    window.location.href = "/updateuser.html";
  }

  // H√†m ƒë·ªÉ render ph√¢n trang
  function renderPagination() {
    const paginationContainer = document.querySelector(
      ".user-list__pagination"
    );
    const totalPages = Math.ceil(totalUsers / rowsPerPage);

    paginationContainer.innerHTML = "";

    // T·∫°o n√∫t "Tr∆∞·ªõc"
    const prevButton = document.createElement("button");
    prevButton.textContent = "¬´";
    prevButton.classList.add("user-list__pagination-button");
    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        renderPage(currentPage);
        renderPagination();
      }
    });
    paginationContainer.appendChild(prevButton);

    // T·∫°o n√∫t cho m·ªói trang
    for (let i = 1; i <= totalPages; i++) {
      const pageButton = document.createElement("button");
      pageButton.textContent = i;
      pageButton.classList.add("user-list__pagination-button");
      if (i === currentPage) {
        pageButton.classList.add("active");
      }
      pageButton.addEventListener("click", () => {
        currentPage = i;
        renderPage(currentPage);
        renderPagination();
      });
      paginationContainer.appendChild(pageButton);
    }

    // T·∫°o n√∫t "Sau"
    const nextButton = document.createElement("button");
    nextButton.textContent = "¬ª";
    nextButton.classList.add("user-list__pagination-button");
    nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderPage(currentPage);
        renderPagination();
      }
    });
    paginationContainer.appendChild(nextButton);

    // Th√™m ph·∫ßn ch·ªçn s·ªë d√≤ng m·ªói trang
    const select = document.createElement("select");
    select.classList.add("user-list__pagination-select");
    [6, 10, 20].forEach((value) => {
      const option = document.createElement("option");
      option.value = value;
      option.textContent = value;
      if (value === rowsPerPage) {
        option.selected = true;
      }
      select.appendChild(option);
    });

    select.addEventListener("change", function () {
      rowsPerPage = parseInt(this.value, 10);
      currentPage = 1;
      renderPage(currentPage);
      renderPagination();
    });

    paginationContainer.appendChild(select);

    // Th√™m ch·ªØ "/Page" sau ph·∫ßn ch·ªçn s·ªë d√≤ng
    const pageLabel = document.createElement("span");
    pageLabel.classList.add("user-list__pagination-page");
    pageLabel.textContent = "/Page";
    paginationContainer.appendChild(pageLabel);
  }

  // H√†m ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang detailuser.html
  function viewDetailUser(userId) {
    localStorage.setItem("userId", userId);
    window.location.href = "/detailuser.html";
  }

  // H√†m ƒë·ªÉ x√≥a ng∆∞·ªùi d√πng b·∫±ng API
  async function deleteUser(userId) {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?")) {
      try {
        const response = await fetch(`${apiUrl}/${userId}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          alert("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
          fetchUsers(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi x√≥a th√†nh c√¥ng
        } else {
          const errorData = await response.json();
          alert(
            `X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i: ${errorData.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
            }`
          );
        }
      } catch (error) {
        console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
        alert("X√≥a ng∆∞·ªùi d√πng th·∫•t b·∫°i do l·ªói k·∫øt n·ªëi");
      }
    }
  }

  // H√†m ƒëƒÉng xu·∫•t
  function logout() {
    localStorage.removeItem("userId");
    localStorage.removeItem("authToken");

    // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    window.location.href = "/signin.html";
    console.log("true");
  }

  // G·∫Øn s·ª± ki·ªán click v√†o ph·∫ßn t·ª≠ ƒëƒÉng xu·∫•t
  const logoutIcons = document.querySelectorAll(
    ".user-info-logout-icon, .user-form__user-icon img"
  );
  logoutIcons.forEach((icon) => {
    icon.addEventListener("click", logout);
  });

  // H√†m ƒë·ªÉ th√™m s·ª± ki·ªán cho n√∫t "New User"
  function setupNewUserButton() {
    const newUserButton = document.querySelector(".user-list__new-user");
    if (newUserButton) {
      newUserButton.addEventListener("click", function () {
        window.location.href = "/adduser.html";
      });
    }
  }
});
async function searchUsers(query) {
  const searchUrl = `${apiUrl}/search?q=${encodeURIComponent(query)}`;

  try {
    const response = await fetch(searchUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        // Th√™m token n·∫øu c·∫ßn thi·∫øt
        Authorization: "Bearer YOUR_AUTH_TOKEN",
      },
    });

    if (!response.ok) {
      throw new Error("L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng");
    }

    const result = await response.json();
    if (result.users && result.users.length > 0) {
      usersData = result.users; // C·∫≠p nh·∫≠t m·∫£ng usersData v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
      renderPage(1); // Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n c·ªßa k·∫øt qu·∫£ t√¨m ki·∫øm
    } else {
      alert("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o.");
      usersData = []; // X√≥a d·ªØ li·ªáu trong usersData n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
      renderPage(1); // X√≥a danh s√°ch hi·ªán t·∫°i tr√™n giao di·ªán
    }
  } catch (error) {
    console.error("L·ªói:", error);
  }
}

document.addEventListener("DOMContentLoaded", function () {
  const apiUrl = "https://crudnodejs-production.up.railway.app/api/users";
  let userId = localStorage.getItem("userId");

  // H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
  function generateRandomPassword() {
    const characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
    let randomPassword = "";
    for (let i = 0; i < 8; i++) {
      randomPassword += characters.charAt(
        Math.floor(Math.random() * characters.length)
      );
    }
    return randomPassword;
  }

  // M·ªü popup ƒë·ªïi m·∫≠t kh·∫©u v√† t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
  window.openChangePasswordPopup = function () {
    document.getElementById("changePasswordPopup").style.display = "block";
    const newPassword = generateRandomPassword();
    document.getElementById("popup-password").value = newPassword;
  };

  // ƒê√≥ng popup
  window.closePopup = function () {
    document.getElementById("changePasswordPopup").style.display = "none";
  };

  // H√†m g·ª≠i y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u qua API
  window.changePassword = async function () {
    const email = document.getElementById("popup-email").value;
    const newPassword = document.getElementById("popup-password").value;

    if (!email || !newPassword) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin email v√† m·∫≠t kh·∫©u m·ªõi.");
      return;
    }

    try {
      const response = await fetch(`${apiUrl}/forgot-password`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, newPassword }),
      });

      if (response.ok) {
        const data = await response.json();
        alert(data.message || "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!");
        document.getElementById("password").value = newPassword; // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong tr∆∞·ªùng ch√≠nh
        closePopup();
      } else {
        alert("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th·∫•t b·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      alert("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th·∫•t b·∫°i do l·ªói k·∫øt n·ªëi");
    }
  };

  // H√†m l·∫•y chi ti·∫øt ng∆∞·ªùi d√πng
  async function fetchUserDetails() {
    if (!userId) return;

    try {
      const response = await fetch(`${apiUrl}/${userId}`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      if (!response.ok) throw new Error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");

      const user = await response.json();
      document.getElementById("username").value = user.username;
      document.getElementById("email").value = user.email;
      document.getElementById("popup-email").value = user.email;
    } catch (error) {
      console.error("C√≥ l·ªói x·∫£y ra:", error);
    }
  }

  // G·ªçi h√†m l·∫•y chi ti·∫øt ng∆∞·ªùi d√πng khi t·∫£i trang
  fetchUserDetails();

  // X·ª≠ l√Ω khi nh·∫•n n√∫t "Save" tr√™n form thay ƒë·ªïi m·∫≠t kh·∫©u
  document
    .querySelector(".user-form-button-save")
    .addEventListener("click", async function () {
      const username = document.getElementById("username").value;
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;

      if (!username || !email || !password) {
        alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
        return;
      }

      try {
        const response = await fetch(`${apiUrl}/${userId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ username, email, password }),
        });

        if (response.ok) {
          alert("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!");
          window.location.href = "/userlist.html";
        } else {
          alert("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th·∫•t b·∫°i.");
        }
      } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
        alert("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th·∫•t b·∫°i do l·ªói k·∫øt n·ªëi");
      }
    });

  // X·ª≠ l√Ω khi nh·∫•n n√∫t "Cancel"
  document
    .querySelector(".user-form-button-cancel")
    .addEventListener("click", function () {
      window.location.href = "/userlist.html";
    });
});

// H√†m ƒëƒÉng xu·∫•t
function logout() {
  // X√≥a d·ªØ li·ªáu x√°c th·ª±c kh·ªèi LocalStorage (n·∫øu c√≥)
  localStorage.removeItem("userId"); // X√≥a ID ng∆∞·ªùi d√πng kh·ªèi localStorage
  localStorage.removeItem("authToken"); // X√≥a token x√°c th·ª±c (n·∫øu c√≥)

  // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
  window.location.href = "/signin.html";
}

document.addEventListener("DOMContentLoaded", function () {
  // C√°c m√£ hi·ªán c√≥ c·ªßa b·∫°n...

  // G·∫Øn s·ª± ki·ªán click v√†o ph·∫ßn t·ª≠ ƒëƒÉng xu·∫•t
  const logoutIcons = document.querySelectorAll(
    ".user-info-logout-icon, .user-form__user-icon img"
  );
  logoutIcons.forEach((icon) => {
    icon.addEventListener("click", logout);
  });
});
document.addEventListener("DOMContentLoaded", function () {
  // T√¨m ph·∫ßn t·ª≠ "Projects" trong sidebar
  const projectNavItem = document.querySelector(
    ".user-list__nav-item-wrapper:nth-child(2) .user-list__nav-item"
  );

  // Ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ "Projects" t·ªìn t·∫°i, th√™m s·ª± ki·ªán click ƒë·ªÉ chuy·ªÉn h∆∞·ªõng
  if (projectNavItem) {
    projectNavItem.addEventListener("click", function () {
      window.location.href = "/projectlist.html";
    });
  }
});
